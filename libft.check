#include "libft.h"
#include <stdlib.h>

#test memset_check
	char s1[25];
	char s2[25];
	ft_strcpy(s1, "Bonjour sAlut 15la");
	ft_strcpy(s2, s1);
	ck_assert_mem_eq(ft_memset(s1, '$', 5), memset(s2, '$', 5), 5);
	ck_assert_mem_eq(ft_memset(s1, '*', 30), memset(s2, '*', 30), 30);

#test bzero_check
	char s1[50];
	char s2[50];
	ft_strcpy(s1, "Bonjour sAlut 15la");
	ft_strcpy(s2, s1);
	ft_bzero(s1, 10);
	bzero(s2, 10);
	ck_assert_mem_eq(s1, s2, 19);

#test memcpy_check
	char s1[50];
	char s2[50];
	ft_strcpy(s1, "Bonjour sAlut 15la");
	ft_memcpy(s2, s1, 10);
	ck_assert_mem_eq(s1, s2, 10);
	ft_bzero(s2, 50);
	ft_memcpy(s2, s1, 0);
	ck_assert_mem_ne(s1, s2, 50);
	ft_memcpy(s2, s1, 50);
	ck_assert_mem_eq(s1, s2, 50);

#test memccpy_check
	char s1[50];
	char s2[50];
	strcpy(s1, "Bonjour sAlut 15la");
	ck_assert_ptr_null(ft_memccpy(s2, s1, '1', 10));
	ck_assert_mem_eq(s1, s2, 10);
	ft_bzero(s2, 50);
	ck_assert_ptr_null(ft_memccpy(s2, s1, '1', 0));
	ck_assert_mem_ne(s1, s2, 50);
	ck_assert_ptr_eq(ft_memccpy(s2, s1, '1', 50), s2 + 15);
	ck_assert_mem_eq(s1, s2, 15);

#test memmove_check
	char s1[50];
	char s2[50];
	ft_strcpy(s1, "memmove can be very useful......");
	ft_strcpy(s2, "memmove can be very very useful.");
	ft_memmove(s1 + 20, s1 + 15, 11);
	ck_assert_str_eq(s1, s2);

#test memchr_check
	char s1[50];
	ft_strcpy(s1, "Ma bite mon couteau");
	ck_assert_ptr_eq(ft_memchr(s1, 'i', 50), memchr(s1, 'i', 50));
	ck_assert_ptr_null(ft_memchr(s1, 'x', 20));
	ck_assert_ptr_eq(ft_memchr(s1, 'i', 2), memchr(s1, 'i', 2));

#test memcmp_check
	char s1[] = "Bonjour comment ca va ?";
	char s2[] = "Bonjour comment ca va bien ?";
	ck_assert_int_eq(ft_memcmp(s1, s2, 50), memcmp(s1, s2, 50));
	ck_assert_int_eq(ft_memcmp(s1, s2, 15), memcmp(s1, s2, 15));
	ft_strcpy(s1, "{");
	ck_assert_int_eq(ft_memcmp(s1, s2, 2), memcmp(s1, s2, 2));

#test strncpy_check
	char s1[50];
	char s2[50];
	ft_strncpy(s1, "Bonjour comment ca va ?", 24);
	ft_strcpy(s2, "Bonjour comment ca va ?");
	ck_assert_str_eq(s1, s2);
	ft_strncpy(s1, "Salut", 10);
	int i = 0;
	while (i < 5)
		ck_assert_int_eq(s1[5 + i++], '\0');

#test strcat_check
	char s1[50];
	char s2[50];
	ft_strcpy(s1, "Ma bite");
	ft_strcpy(s2, ", mon couteau");
	ft_strcat(s1, s2);
	ck_assert_str_eq(s1, "Ma bite, mon couteau");
	ft_strcpy(s2, "");
	ft_strcat(s1, s2);
	ck_assert_str_eq(s1, "Ma bite, mon couteau");

#test strncat_check
	char s1[50];
	char s2[50];
	ft_strcpy(s1, "Ma bite");
	ft_strcpy(s2, ", mon couteau");
	ft_strncat(s1, s2, 20);
	ck_assert_str_eq(s1, "Ma bite, mon couteau");
	ft_strcpy(s2, ". Moi j'aime le jambon.");
	ft_strncat(s1, s2, 15);
	ck_assert_str_eq(s1, "Ma bite, mon couteau. Moi j'aime le");

#test strlcat_check
	char s1[50];
	char s2[50];
	ft_strcpy(s1, "Ma bite");
	ft_strcpy(s2, ", mon couteau");
	ft_strlcat(s1, s2, sizeof(s1));
	ck_assert_str_eq(s1, "Ma bite, mon couteau");
	ft_strcpy(s2, "");
	ft_strlcat(s1, s2, sizeof(s1));
	ck_assert_str_eq(s1, "Ma bite, mon couteau");

#test strchr_check
	char s1[50];
	ft_strcpy(s1, "WOW OMG DOGS !!");
	ck_assert_ptr_eq(ft_strchr(s1, 'S'), strchr(s1, 'S'));
	ck_assert_ptr_eq(ft_strchr(s1, 'X'), strchr(s1, 'X'));

#test strrchr_check
	char s1[50];
	ft_strcpy(s1, "WOW OMG DOGS !!");
	ck_assert_ptr_eq(ft_strrchr(s1, 'O'), strrchr(s1, 'O'));
	ck_assert_ptr_eq(ft_strrchr(s1, 'X'), strrchr(s1, 'X'));

#test strstr_check
	char s1[50];
	char s2[50];
	ft_strcpy(s1, "WOW OMG DOGS !!");
	ft_strcpy(s2, "DOGS");
	ck_assert_ptr_eq(ft_strstr(s1, s2), strstr(s1, s2));
	ft_strcpy(s2, "Test");
	ck_assert_ptr_eq(ft_strstr(s1, s2), strstr(s1, s2));

#test strcmp_check
	char s1[50];
	char s2[50];
	ft_strcpy(s1, "WOW OMG DOGS");
	ft_strcpy(s2, "WOW OMG DOGS");
	ck_assert_int_eq(ft_strcmp(s1, s2), strcmp(s1, s2));
	ft_strcpy(s1, "WOW OMG DOGS");
	ft_strcpy(s2, "WOW OMG DOGX");
	ck_assert_int_eq(ft_strcmp(s1, s2), strcmp(s1, s2));
	ft_strcpy(s1, "WOW OMG DOGX");
	ft_strcpy(s2, "WOW OMG DOGS");
	ck_assert_int_eq(ft_strcmp(s1, s2), strcmp(s1, s2));
	ft_strcpy(s1, "");
	ft_strcpy(s2, "WOW OMG DOGS");
	ck_assert_int_eq(ft_strcmp(s1, s2), strcmp(s1, s2));

#test strncmp_check
	char s1[50];
	char s2[50];
	ft_strcpy(s1, "WOW OMG DOGS");
	ft_strcpy(s2, "WOW OMG DOGS");
	ck_assert_int_eq(ft_strncmp(s1, s2, 30), strncmp(s1, s2, 30));
	ft_strcpy(s1, "WOW OMG DOGS");
	ft_strcpy(s2, "WOW OMG DOGX");
	ck_assert_int_eq(ft_strncmp(s1, s2, 30), strncmp(s1, s2, 30));
	ft_strcpy(s1, "WOW OMG DOGX");
	ft_strcpy(s2, "WOW OMG DOGS");
	ck_assert_int_eq(ft_strncmp(s1, s2, 30), strncmp(s1, s2, 30));
	ft_strcpy(s1, "");
	ft_strcpy(s2, "WOW OMG DOGS");
	ck_assert_int_eq(ft_strncmp(s1, s2, 30), strncmp(s1, s2, 30));
	ft_strcpy(s1, "WOW OMG DOGS");
	ft_strcpy(s1, "WOW OMG DOGX");
	ck_assert_int_eq(ft_strncmp(s1, s2, 7), strncmp(s1, s2, 7));

#test atoi_check
	ck_assert_int_eq(ft_atoi("  42"), atoi("  42"));
	ck_assert_int_eq(ft_atoi("wd42"), atoi("wd42"));
	ck_assert_int_eq(ft_atoi("+42"), atoi("+42"));
	ck_assert_int_eq(ft_atoi("-42"), atoi("-42"));
	ck_assert_int_eq(ft_atoi("42 42"), atoi("42 42"));
	ck_assert_int_eq(ft_atoi("--42"), atoi("--42"));
	ck_assert_int_eq(ft_atoi("++42"), atoi("++42"));
	ck_assert_int_eq(ft_atoi(""), atoi(""));

#test memalloc_check
	void *s1 = ft_memalloc(10);
	char s2[50];
	ft_bzero(s2, 50);
	ck_assert_mem_eq(s1, s2, 10);
	ft_memdel(&s1);
	s1 = ft_memalloc(50);
	ck_assert_mem_eq(s1, s2, 50);

#test strnew_check
	char *s1 = ft_strnew(10);
	char s2[50];
	ft_bzero(s2, 50);
	ck_assert_mem_eq(s1, s2, 11);
	ft_strdel(&s1);
	s1 = ft_strnew(49);
	ck_assert_mem_eq(s1, s2, 50);

#test strmap_check
	char *s1 = ft_strdup("Ma bite, mon couteau !!");
	char *s2 = ft_strdup("MA BITE, MON COUTEAU !!");
	char *tmp = s1;
	s1 = ft_strmap(s1, (char (*)(char))&ft_toupper);
	free(tmp);
	ck_assert_str_eq(s1, s2);

#test strequ_check
	ck_assert_int_eq(ft_strequ("", "ded"), 0);
	ck_assert_int_eq(ft_strequ("Wowser", "Wowser"), 1);
	ck_assert_int_eq(ft_strequ("chibre", "ded"), 0);

#test strnequ_check
	ck_assert_int_eq(ft_strnequ("", "ded", 3), 0);
	ck_assert_int_eq(ft_strnequ("dwe", "dzz", 3), 0);
	ck_assert_int_eq(ft_strnequ("dwe", "ded", 1), 1);
	ck_assert_int_eq(ft_strnequ("ded", "ded", 3), 1);

#test strsub_check
	char s2[50] = "WOW";
	ck_assert_str_eq(ft_strsub("WOWSER", 0, 3), s2);
